% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dsem.R
\name{dsem}
\alias{dsem}
\title{Fit dynamic structural equation model}
\usage{
dsem(
  sem,
  tsdata,
  family = rep("fixed", ncol(tsdata)),
  quiet = FALSE,
  run_model = TRUE,
  ...
)
}
\arguments{
\item{sem}{structural equation model structure, passed to either \code{\link[sem]{specifyModel}}
or \code{\link[sem]{specifyEquations}} and then parsed to control
the set of path coefficients and variance-covariance parameters}

\item{tsdata}{phylogenetic structure, using class \code{\link[ape]{as.phylo}}}

\item{family}{Character-vector listing the distribution used for each column of \code{tsdata}, where
each element must be \code{fixed} or \code{normal}.
\code{family="fixed"} is default behavior and assumes that a given variable is measured exactly.
Other options correspond to different specifications of measurement error.}

\item{quiet}{if \code{FALSE}, the default, then the number of input lines is reported and
    a message is printed suggesting that \code{specifyEquations} or \code{cfa} be used.}

\item{run_model}{Boolean indicating whether to estimate parameters (the default), or
instead to return the model inputs and compiled TMB object without running;}

\item{...}{Additional parameters passed to \code{\link{fit_tmb}}}
}
\description{
Fits a dynamic structural equation model
}
\examples{
\dontrun{
# Load data set
library(phylopath)

# Define model
sem = "
  Profits -> Consumption, 0, a2
  Profits -> Consumption, -1, a3
  Priv_wage -> Consumption, 0, a4
  Gov_wage -> Consumption, 0, a4
  Consumption <-> Consumption, 0, v1
  Consumption -> Consumption, -1, ar1
  Consumption -> Consumption, -2, ar2
  Profits -> Investment, 0, b2
  Profits -> Investment, -1, b3
  Capital_stock -> Investment, -1, b4
  Investment <-> Investment, 0, v2
  neg_Gov_wage <-> neg_Gov_wage, 0, v3
  GNP -> Priv_wage, 0, c2
  Taxes -> Priv_wage, 0, c2
  neg_Gov_wage -> Priv_wage, 0, c2
  GNP -> Priv_wage, -1, c3
  Taxes -> Priv_wage, -1, c3
  neg_Gov_wage -> Priv_wage, -1, c3
  Time -> Priv_wage, 0, c4
  Priv_wage <-> Priv_wage, 0, v4
  GNP <-> GNP, 0, v5
  Profits <-> Profits, 0, v6
  Capital_stock <-> Capital_stock, 0, v7
  Taxes <-> Taxes, 0, v8
  Time <-> Time, 0, v9
  Gov_wage <-> Gov_wage, 0, v10
  Gov_expense <-> Gov_expense, 0, v11
"

# Load data
data("KleinI", package = "AER")
Data = as.data.frame(KleinI)
Data = cbind( Data, "time" = seq(1,22)-11 )
colnames(Data) = sapply( colnames(Data), FUN=switch, "consumption"="Consumption", "invest"="Investment", "cprofits"="Profits", "capital"="Capital_stock", "gwage"="Gov_wage", "pwage"="Priv_wage", "gexpenditure"="Gov_expense", "taxes"="Taxes", "time"="Time", "gnp"="GNP")
Z = ts( cbind(Data, "neg_Gov_wage"=-1*Data[,'Gov_wage']) )

# Fit model
fit = dsem( sem=sem, tsdata=Z )
}

}
